package:
  name: apache-apisix
  version: "3.13.0"
  epoch: 0
  description: "The Cloud-Native API Gateway and AI Gateway"
  copyright:
    - license: Apache-2.0
  dependencies:
    runtime:
      # https://github.com/apache/apisix/blob/master/docker/debian-dev/docker-entrypoint.sh
      - bash
      - bash-binsh
      # base64 is required at runtime
      - coreutils
      - gawk
      - gd
      - geoip
      - grep
      - libgcc
      - libwasmtime
      - libxslt
      - luajit
      - openssl
      - pcre
      - perl
      - zlib

environment:
  contents:
    packages:
      - bash
      - bash-binsh
      - build-base
      - busybox
      - ca-certificates-bundle
      - coreutils
      - curl
      - etcd
      - gcc
      - gd-dev
      - geoip-dev
      - gnupg
      - libwasmtime
      - libxml2-dev
      - libxslt-dev
      - linux-headers
      - lua-resty-worker-events
      - luajit-dev
      - luarocks
      - nodejs
      - openldap-dev
      - openresty
      - openssl-dev
      - patch
      - pcre-dev
      - perl-app-cpanminus
      - perl-dev
      - pnpm
      - readline-dev
      - unzip
      - wasmtime-dev
      - wget
      - xz
      - yaml-dev
      - zlib-dev

# These environment variables need to be updated for each new release. Retrieve their
# correct values from here, replacing <package-version> with the package version.
#   - https://github.com/api7/apisix-build-tools/blob/apisix/<package-version>/build-apisix-runtime.sh
vars:
  BUILD_DIRECTORY: "/home/build"
  OPENRESTY_VERSION: "1.27.1.2"
  OPENRESTY_CHECKSUM: "74f076f7e364b2a99a6c5f9bb531c27610c78985abe956b442b192a2295f7548"
  NGINX_VERSION: "1.27.1"
  # 0.2.0 is required by apisix
  RESTY_EVENTS_VERSION: "0.2.0"
  RESTY_EVENTS_CHECKSUM: "8448a92cec36ac04ea522e78f6496ba03c9b1fd8"
  NGX_MULTI_UPSTREAM_VERSION: "1.3.2"
  NGX_MULTI_UPSTREAM_CHECKSUM: "0c9e4cec7cb8ec281a4e66fe2dcf2b927c8ef46d"
  DUBBO_MODULE_VERSION: "1.0.2"
  DUBBO_MODULE_CHECKSUM: "4aabf9448fe4a49ca71009af8e03645ee5dadd15"
  APISIX_NGINX_MODULE_VERSION: "1.19.2"
  APISIX_NGINX_MODULE_CHECKSUM: "b94ebabffc87d88d540346dc3edb5f7606418305"
  WASM_NGINX_MODULE_VERSION: "0.7.0"
  WASM_NGINX_MODULE_CHECKSUM: "0b4b31d6ecfdbc587e8ea455ed6e920a98aadff1"
  LUA_VAR_NGINX_MODULE_VERSION: "v0.5.3"
  LUA_VAR_NGINX_MODULE_CHECKSUM: "dc04c71e14e8a0407831f9019043d7e6da61b3c3"
  # This checksum is retrived from the apisix-build-tools repository
  # https://github.com/api7/apisix-build-tools
  APISIX_BUILD_TOOLS_CHECKSUM: "cbf9796396f543e9e6757abd465273b3021e544d"

# apisix builds openresty from source with a several added modules:
# https://github.com/api7/apisix-build-tools/blob/apisix/3.13.0/build-apisix-runtime.sh#L82
pipeline:
  - name: "Build Openresty"
    pipeline:
      - working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}/
        uses: fetch
        with:
          uri: https://openresty.org/download/openresty-${{vars.OPENRESTY_VERSION}}.tar.gz
          expected-sha256: ${{vars.OPENRESTY_CHECKSUM}}
      - uses: git-checkout
        with:
          repository: https://github.com/Kong/lua-resty-events
          tag: ${{vars.RESTY_EVENTS_VERSION}}
          expected-commit: ${{vars.RESTY_EVENTS_CHECKSUM}}
          destination: lua-resty-events
      - uses: git-checkout
        with:
          repository: https://github.com/api7/ngx_multi_upstream_module.git
          tag: ${{vars.NGX_MULTI_UPSTREAM_VERSION}}
          expected-commit: ${{vars.NGX_MULTI_UPSTREAM_CHECKSUM}}
          destination: nginx-multi-upstream
      - uses: git-checkout
        with:
          repository: https://github.com/api7/mod_dubbo.git
          tag: ${{vars.DUBBO_MODULE_VERSION}}
          expected-commit: ${{vars.DUBBO_MODULE_CHECKSUM}}
          destination: dubbo-module
      - uses: git-checkout
        with:
          repository: https://github.com/api7/apisix-nginx-module.git
          tag: ${{vars.APISIX_NGINX_MODULE_VERSION}}
          expected-commit: ${{vars.APISIX_NGINX_MODULE_CHECKSUM}}
          destination: apisix-nginx-module
      - uses: git-checkout
        with:
          repository: https://github.com/api7/wasm-nginx-module.git
          tag: ${{vars.WASM_NGINX_MODULE_VERSION}}
          expected-commit: ${{vars.WASM_NGINX_MODULE_CHECKSUM}}
          destination: wasm-nginx-module
      - uses: git-checkout
        with:
          repository: https://github.com/api7/lua-var-nginx-module
          tag: ${{vars.LUA_VAR_NGINX_MODULE_VERSION}}
          expected-commit: ${{vars.LUA_VAR_NGINX_MODULE_CHECKSUM}}
          destination: lua-var-nginx-module
      # Apply upstream patches to configure out nginx server
      # https://github.com/api7/apisix-build-tools/blob/apisix/3.13.0/build-apisix-runtime.sh#L130
      - name: Apply ngx-multi-upstream patches
        working-directory: ${{vars.BUILD_DIRECTORY}}/nginx-multi-upstream/
        runs: |
          ./patch.sh ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}
      - name: Apply apisix-nginx-module patches
        working-directory: ${{vars.BUILD_DIRECTORY}}/apisix-nginx-module/patch
        runs: |
          ./patch.sh ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}
      # Configure is replicated from here: https://github.com/api7/apisix-build-tools/blob/apisix/3.13.0/build-apisix-runtime.sh#L161
      - name: Configure openresty build
        working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}
        runs: |
          ./configure \
            --add-module=../lua-resty-events \
            --add-module=../dubbo-module \
            --add-module=../nginx-multi-upstream \
            --add-module=../lua-var-nginx-module \
            --add-module=../wasm-nginx-module \
            --add-module=../apisix-nginx-module \
            --add-module=../apisix-nginx-module/src/meta \
            --add-module=../apisix-nginx-module/src/stream \
            --build=${{host.triplet.gnu}} \
            --with-pcre \
            --with-cc-opt='-DNGX_LUA_ABORT_AT_PANIC -I/usr/include' \
            --with-ld-opt='-L/usr/lib -Wl,-rpath,/usr/lib' \
            --with-poll_module \
            --with-pcre-jit \
            --without-http_rds_json_module \
            --without-http_rds_csv_module \
            --without-lua_rds_parser \
            --with-stream \
            --with-stream_ssl_module \
            --with-stream_ssl_preread_module \
            --with-http_v2_module \
            --with-http_v3_module \
            --without-mail_pop3_module \
            --without-mail_imap_module \
            --without-mail_smtp_module \
            --with-http_stub_status_module \
            --with-http_realip_module \
            --with-http_addition_module \
            --with-http_auth_request_module \
            --with-http_secure_link_module \
            --with-http_random_index_module \
            --with-http_gzip_static_module \
            --with-http_sub_module \
            --with-http_dav_module \
            --with-http_flv_module \
            --with-http_mp4_module \
            --with-http_gunzip_module \
            --with-threads \
            --with-compat \
            --with-luajit=/usr \
            --with-luajit-xcflags='-DLUAJIT_NUMMODE=2 -DLUAJIT_ENABLE_LUA52COMPAT' \
            --with-pcre-jit
      - working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}
        uses: autoconf/make
      - working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}
        uses: autoconf/make-install
      - name: Move openresty binaries to /usr/bin
        working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}
        runs: |
          mkdir -p ${{targets.destdir}}/usr/bin
          mv ${{targets.destdir}}/usr/local/openresty/bin/* ${{targets.destdir}}/usr/bin/
      - name: Setup openresty configuration
        working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}
        runs: |
          mkdir -p ${{targets.destdir}}/var/run/openresty/
          mkdir -p ${{targets.destdir}}/etc/nginx/conf.d
          install -m644 -D ${{vars.BUILD_DIRECTORY}}/nginx.conf ${{targets.destdir}}/etc/nginx/
          install -m644 -D ${{vars.BUILD_DIRECTORY}}/default.conf ${{targets.destdir}}/etc/nginx/conf.d
          install -d ${{targets.contextdir}}/var/log/openresty
          ln -sf /dev/stdout ${{targets.contextdir}}/var/log/openresty/access.log
          ln -sf /dev/stderr ${{targets.contextdir}}/var/log/openresty/error.log
      - name: Install apisix-nginx-module
        working-directory: ${{vars.BUILD_DIRECTORY}}/apisix-nginx-module
        runs: |
          OPENRESTY_PREFIX="${{targets.destdir}}/usr/local/openresty" make install
      - name: Install wasm-nginx-module
        working-directory: ${{vars.BUILD_DIRECTORY}}/wasm-nginx-module
        runs: |
          install -m 664 lib/resty/*.lua ${{targets.destdir}}/usr/local/openresty/lualib/resty
      - name: Install lua-resty-events module
        working-directory: ${{vars.BUILD_DIRECTORY}}/lua-resty-events
        uses: autoconf/make-install
        with:
          opts: "LUA_LIB_DIR=/usr/local/openresty/lualib/"
  - name: "Build Apache APISIX"
    pipeline:
      # With openresty built and the modules in place, checkout apisix
      - uses: git-checkout
        working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}
        with:
          repository: https://github.com/apache/apisix
          tag: ${{package.version}}
          expected-commit: 77dacda31277a31d6014b4970e36bae2a5c30907
          destination: apache-apisix
      # Patch to update the apisix script to use our lua libraries
      - uses: patch
        working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}
        with:
          patches: ${{vars.BUILD_DIRECTORY}}/set-deps-path.patch
      - working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}/apache-apisix
        runs: |
          luarocks install apisix-master-0.rockspec --tree deps --only-deps
      # https://github.com/apache/apisix/blob/master/Makefile#L248-L388
      - name: Setup required apisix directories
        uses: autoconf/make-install
        with:
          dir: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}/apache-apisix
      - name: Install required dependencies and move files to correct locations
        working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}/apache-apisix
        runs: |
          install -d "${{targets.contextdir}}"/usr/local/apisix/deps/lib
          install -d "${{targets.contextdir}}"/usr/local/apisix/deps/share
          install -m755 -D /usr/bin/apisix "${{targets.contextdir}}"/usr/local/bin/apisix
          mv /usr/local/apisix/* "${{targets.contextdir}}"/usr/local/apisix/
          mv /usr/share/lua/5.1/apisix "${{targets.contextdir}}"/usr/local/apisix/
          mv deps/lib "${{targets.contextdir}}"/usr/local/apisix/deps/
          mv deps/share "${{targets.contextdir}}"/usr/local/apisix/deps/
  # As of 3.13.0, apisix-dashboard is included in the apisix image:
  # https://github.com/apache/apisix/pull/12276
  - name: "Build and Install APISIX Dashboard"
    pipeline:
      - working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}/apache-apisix
        uses: git-checkout
        with:
          repository: https://github.com/api7/apisix-build-tools.git
          tag: "apisix/${{package.version}}"
          expected-commit: ${{vars.APISIX_BUILD_TOOLS_CHECKSUM}}
          destination: apisix-build-tools
      - working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}/apache-apisix
        runs: |
          ./apisix-build-tools/build-apisix-dashboard.sh .
          mv ./ui ${{targets.contextdir}}/usr/local/apisix/
  - uses: strip

subpackages:
  - name: "apache-apisix-compat"
    description: "Compat package for apache-apisix"
    dependencies:
      runtime:
        # https://github.com/apache/apisix-docker/blob/release/apisix-3.13.0/debian/Dockerfile#L45
        - brotli
        - ca-certificates-bundle
    pipeline:
      - working-directory: ${{vars.BUILD_DIRECTORY}}/openresty-${{vars.OPENRESTY_VERSION}}/apache-apisix
        runs: |
          install -d "${{targets.contextdir}}"/usr/local/apisix/logs/
          install -d "${{targets.contextdir}}"/usr/local/openresty/bin/
          install -d "${{targets.contextdir}}"/usr/bin
          ln -sf /usr/bin/openresty "${{targets.contextdir}}"/usr/local/openresty/bin/openresty
          ln -sf /dev/stdout "${{targets.contextdir}}"/usr/local/apisix/logs/access.log
          ln -sf /dev/stderr "${{targets.contextdir}}"/usr/local/apisix/logs/error.log
          ln -sf /usr/local/bin/apisix "${{targets.contextdir}}"/usr/bin/apisix
          install docker/debian-dev/docker-entrypoint.sh "${{targets.contextdir}}"/
          install docker/utils/check_standalone_config.sh "${{targets.contextdir}}"/

update:
  enabled: true
  manual: true
  exclude-reason: "This package requires manual updates due to its complexity and dependencies on specific versions of other software."
  github:
    identifier: apache/apisix
    use-tag: true

test:
  environment:
    contents:
      packages:
        - etcd
        - curl
        - yq
        - jq
        - nodejs
    environment:
      PROXY_URL: "http://127.0.0.1:9080"
      ADMIN_URL: "http://127.0.0.1:9180"
  pipeline:
    - runs: |
        apisix version | grep ${{package.version}}
        apisix test | grep "configuration test is successful"
    - name: "Setup and run apisix"
      runs: |
        nohup etcd >/dev/null 2>&1 &
        CHILD_PID=$!
        trap "kill $CHILD_PID" EXIT
        curl --fail --retry 5 --retry-delay 2 --retry-connrefused --retry-max-time 15 http://127.0.0.1:2379/health
      uses: test/daemon-check-output
      with:
        start: apisix start
        expected_output: "trying to initialize the data of etcd"
        error_strings: |
          "all etcd nodes are unavailable"
    - name: "Test routes endpoint"
      runs: |
        ADMIN_KEY=$(yq e -r '.deployment.admin.admin_key[] | .key' /usr/local/apisix/conf/config.yaml)
        curl --fail -s -H "X-API-KEY: ${ADMIN_KEY}" "http://127.0.0.1:9180/apisix/admin/routes" | jq .total | grep 0
        payload=$(cat <<EOF
        {
          "uri": "/hello",
          "plugins": {
            "response-rewrite": {
              "body": "hello world",
              "status_code": 200
            }
          }
        }
        EOF
        )
        curl --fail -X PUT -H "X-API-KEY: ${ADMIN_KEY}" "http://127.0.0.1:9180/apisix/admin/routes/100" -d "$payload"
        HTTP_CODE=$(curl --fail -s --retry 5 --retry-delay 2 --retry-connrefused --retry-max-time 15 -o /dev/null -w "%{http_code}" "http://127.0.0.1:9080/hello")
        BODY=$(curl --fail -s  "http://127.0.0.1:9080/hello")
        if [[ "$HTTP_CODE" -ne 200 || "$BODY" != "hello world" ]]; then
          echo "ERROR: Expected 200 and body 'hello world', got code=$HTTP_CODE, body=$BODY"
          exit 1
        fi
        curl --fail -s -H "X-API-KEY: ${ADMIN_KEY}" "http://127.0.0.1:9180/apisix/admin/routes" | jq .total | grep 1
    - name: "Test key-auth plugin"
      runs: |
        # Start a simple nodejs webserver
        cat <<'EOF' > server.js
        const http = require('http');
        http.createServer((req, res) => {
          if (req.url === '/get') {
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ secure: 'yes' }));
          } else {
            res.writeHead(404);
            res.end();
          }
        }).listen(8000, () => console.log('Listening on http://0.0.0.0:8000'));
        EOF
        nohup node server.js &
        CHILD_PID=$!
        trap "kill $CHILD_PID" EXIT
        curl --fail --retry 5 --retry-delay 2 --retry-connrefused --retry-max-time 15 http://127.0.0.1:8000/get
        # Get the API key
        ADMIN_KEY=$(yq e -r '.deployment.admin.admin_key[] | .key' /usr/local/apisix/conf/config.yaml)
        # Create consumer with key-auth plugin
        consumer_payload=$(cat <<EOF
        { "username": "test-consumer", "plugins": {"key-auth": {"key": "consumer-key"}}}
        EOF
        )
        curl --fail -s -H "Content-Type: application/json" -H "X-API-KEY: ${ADMIN_KEY}" -X PUT "${ADMIN_URL}/apisix/admin/consumers/test-consumer" -d "$consumer_payload" | jq
        # Create route with key-auth plugin and mock upstream
        ROUTE_KA=101
        route_payload=$(cat <<EOF
        {
          "uri": "/secure",
          "plugins": {"key-auth": {}, "proxy-rewrite": {"uri": "/get"}},
          "upstream": {"type": "roundrobin", "nodes": {"127.0.0.1:8000": 1}, "scheme": "http"}
        }
        EOF
        )
        curl --fail -s -H "Content-Type: application/json" -H "X-API-KEY: ${ADMIN_KEY}" -X PUT "${ADMIN_URL}/apisix/admin/routes/${ROUTE_KA}" -d "$route_payload" | jq
        # Test without key
        CODE_NO_KEY=$(curl -s --retry 5 --retry-delay 2 --retry-connrefused --retry-max-time 15 -o /dev/null -w "%{http_code}" "${PROXY_URL}/secure")
        if [[ "$CODE_NO_KEY" -ne 401 ]]; then
          echo "ERROR: Expected 401 without key, got $CODE_NO_KEY"
          exit 1
        fi
        # Test with key - should get 200 (proxied to upstream)
        CODE_KEY=$(curl --fail -s -o /dev/null -w "%{http_code}" -H "apikey: consumer-key" "${PROXY_URL}/secure")
        if [[ "$CODE_KEY" -ne 200 ]]; then
          echo "ERROR: Expected 200 with key, got $CODE_KEY"
          exit 1
        fi
